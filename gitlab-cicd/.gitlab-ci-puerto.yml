Gitlab-ci.yml para Node:Backend

# # You can override the included template(s) by including variable overrides
# # SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# # Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# # Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# # Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# # Note that environment variables can be set in several places
# # See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
# stages:
# - test
# sast:
#   stage: test
# include:
# - template: Security/SAST.gitlab-ci.yml

variables:
  DOCKER_IMAGE_NAME: imagen-name
# This folder is cached between builds
# https://docs.gitlab.com/ee/ci/yaml/index.html#cache
cache:
  key: '$CI_COMMIT_REF_SLUG'
  paths:
    - node_modules/

# Dejar los stages necesarios en tu proyecto
stages:
  - app-build
  - docker-build
  - docker-run

build-code-job:
  image: node:16-alpine
  stage: app-build
  script: 
    - "npm i --legacy-peer-deps"
    - "npm run build"
  artifacts:
    paths:
      - dist/
  only:
    - main
  when:
    manual

build-docker-job:
  stage: docker-build
  image: docker:latest
  services:
  - name: docker:dind
    alias: docker
  before_script:
    - echo ${DOCKER_REGISTRY_PASSWORD} | docker login -u "$DOCKER_REGISTRY_USER" --password-stdin
  script:
    - docker build --pull -t "$DOCKER_REGISTRY_USER/$DOCKER_IMAGE_NAME:latest" .

    - docker push "$DOCKER_REGISTRY_USER/$DOCKER_IMAGE_NAME:latest"
  dependencies:
    - build-code-job
  only:
    - main
  when:
    manual

run-docker-job:
  stage: docker-run
  image: docker:latest
  services:
  - name: docker:dind
    alias: docker
    #command: ["--tls=false"]
  before_script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    #Conexión vía ssh y posicionamiento en /containers
    - ssh -o StrictHostKeyChecking=no ${usuario}@${serverip} "cd /var/home/core/containers/imagen-dir;docker-compose down;docker pull imagename:latest;docker-compose up -d;exit"
  only:
    - main
  when:
    manual
